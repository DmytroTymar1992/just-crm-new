import json, openai, re
from django.conf import settings
from django.utils import timezone
from tiktoken import get_encoding
from chats.models import Interaction
from openai import OpenAI

client = OpenAI(api_key=settings.OPENAI_API_KEY)
ENC = get_encoding("cl100k_base")                # —Ç–æ–∫–µ–Ω—ñ–∑–∞—Ç–æ—Ä OpenAI

def _format(i: Interaction) -> str:
    ts = i.date.strftime("%d.%m.%Y %H:%M")        # 06.06.2025 10:15
    who = "–º–µ–Ω–µ–¥–∂–µ—Ä–∞" if i.sender == "user" else "–∫–ª—ñ—î–Ω—Ç–∞"

    match i.interaction_type:
        case Interaction.InteractionType.CALL:
            call = i.calls.first()
            body = (call.result or call.description or "").strip()
            return f"–í–∑–∞—î–º–æ–¥—ñ—è {ts} ‚Ä¢ –¥–∑–≤—ñ–Ω–æ–∫ –≤—ñ–¥ {who}. –†–µ–∑—É–ª—å—Ç–∞—Ç: {body[:800]}"

        case Interaction.InteractionType.EMAIL:
            em = i.emails.first()
            subj = em.subject if em else ""
            return (f"–í–∑–∞—î–º–æ–¥—ñ—è {ts} ‚Ä¢ –ª–∏—Å—Ç {who}. –¢–µ–º–∞: {subj[:120]}. "
                    f"–¢–µ–∫—Å—Ç: {(em.body if em else '')[:400]}")

        case Interaction.InteractionType.TELEGRAM:
            t = i.telegram_messages.first()
            return f"–í–∑–∞—î–º–æ–¥—ñ—è {ts} ‚Ä¢ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è Telegram {who}. –¢–µ–∫—Å—Ç: {(t.text if t else '')[:400]}"

        case Interaction.InteractionType.VIBER:
            v = i.viber_messages.first()
            return f"–í–∑–∞—î–º–æ–¥—ñ—è {ts} ‚Ä¢ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è Viber {who}. –¢–µ–∫—Å—Ç: {(v.text if v else '')[:400]}"

        case _:
            return f"–í–∑–∞—î–º–æ–¥—ñ—è {ts} ‚Ä¢ {i.interaction_type}. –û–ø–∏—Å: {i.description[:400]}"

def _limit_tokens(text: str, max_tok: int = 3500) -> str:
    toks = ENC.encode(text)
    if len(toks) <= max_tok:
        return text
    # –æ–±—Ä—ñ–∑–∞—î–º–æ –ø–æ—á–∞—Ç–æ–∫ (–∑–∞–ª–∏—à–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ max_tok)
    return ENC.decode(toks[-max_tok:])

def suggest_task(interaction: Interaction) -> dict:
    """–ì–µ–Ω–µ—Ä—É—î {type, goal, short_description} –Ω–∞ –±–∞–∑—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É."""
    qs = (Interaction.objects
          .filter(chat=interaction.chat)
          .select_related('user', 'contact')
          .prefetch_related('calls', 'emails',
                            'telegram_messages', 'viber_messages')
          .order_by('-date')[:10])

    history = "\n".join(reversed([_format(i) for i in qs]))
    history = _limit_tokens(history)             # –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ >8–ö —Ç–æ–∫–µ–Ω—ñ–≤

    system_msg = (
                """
        –¢–∏ ‚Äî –∞—Å–∏—Å—Ç–µ–Ω—Ç CRM. 
        –í CRM –ú–µ–Ω–µ–¥–∂–µ—Ä–∏ —Å–ø—ñ–ª–∫—É—é—Ç—Å—å—è –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏ —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—é—Ç—å –ø–æ—Å–ª—É–≥–∏ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –≤–∞–∫–∞–Ω—Å—ñ–π –Ω–∞ –î–∂–æ–ø —Å–∞–π—Ç—ñ JUST-look
        –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è:
        
        1. –ü—Ä–æ—á–∏—Ç–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é (–Ω–∞–π—Å–≤—ñ–∂—ñ—à–∞ –≤–∑–∞—î–º–æ–¥—ñ—è –≤–Ω–∏–∑—É).
        2. –ó–Ω–∞–π—Ç–∏, –©–û —Å–∞–º–µ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–æ–±—ñ—Ü—è–≤ –∑—Ä–æ–±–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É üåü
           –∞–±–æ —è–∫—É —è–≤–Ω—É –¥—ñ—é –ø–æ–ø—Ä–æ—Å–∏–≤ —Å–∞–º –∫–ª—ñ—î–Ω—Ç.
        3. –ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ —Å–æ–±—ñ –∑–∞–¥–∞—á—É –î–∑–≤—ñ–Ω–æ–∫, –õ–∏—Å—Ç (—Ü–µ Email –ª–∏—Å—Ç) –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ( —Ü–µ Viber –∞–±–æ Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)  
        4. –ó–∞–ø—Ä–æ–ø–æ–Ω—É–π –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤–∞—Ä—ñ–∞–Ω—Ç –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –∑–∞–¥–∞—á—ñ –ø–æ —Ü—å–æ–º—É –∫–ª—ñ—î–Ω—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ type, goal, short_description  
        5. –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –¢–Ü–õ–¨–ö–ò JSON:
        {
         "type": "–î–∑–≤—ñ–Ω–æ–∫ | –ª–∏—Å—Ç | –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
         "goal": "–∫–æ—Ä–æ—Ç–∫–µ –¥—ñ—î—Å–ª–æ–≤–æ + –æ–±'—î–∫—Ç",
         "short_description": "1‚Äì2 —Ä–µ—á–µ–Ω–Ω—è (—É—Ç–æ—á–Ω–µ–Ω–Ω—è)"
        }
        
        –Ø–∫—â–æ –∂–æ–¥–Ω–∞ –¥—ñ—è –Ω–µ –æ–∑–≤—É—á–µ–Ω–∞ ‚Äî –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –ª–æ–≥—ñ—á–Ω–∏–π follow-up.
        –í—ñ–¥–∞–≤–∞–π –ø–µ—Ä–µ–≤–∞–≥—É –¥–∑–≤—ñ–Ω–∫–∞–º —è–∫—â–æ —ñ–Ω—à–æ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–±–∞—á–∏–Ω–æ –ª–æ–≥—ñ—á–Ω–æ –ø–æ —ñ—Å—Ç–æ—Ä—ñ—ó –≤–∑–∞—î–º–æ–¥—ñ–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–∞ –∫–ª—ñ—î–Ω—Ç–∞.
        –í goal —Å—Ç–∞—Ä–∞–π—Å—è –Ω–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏ –¥—ñ—î—Å–ª–æ–≤–∞ —è–∫—ñ –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ —Ç–∏–ø –∑–∞–¥–∞—á—ñ. —Ü–µ –π —Ç–∞–∫ –∑—Ä–æ–∑—É–º—ñ–ª–æ –∑ —Ç–∏–ø—É –∑–∞–¥–∞—á—ñ.
        """
    )
    user_msg = f"–Ü—Å—Ç–æ—Ä—ñ—è:\n{history}\n\n–Ø–∫—É –∑–∞–¥–∞—á—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏?"

    response = client.chat.completions.create(
        model=settings.OPENAI_MODEL,  # "gpt-4o-mini"
        messages=[
            {"role": "system", "content": system_msg},
            {"role": "user", "content": user_msg},
        ],
        response_format={"type": "json_object"},
        temperature=0.1,
        max_tokens=120,
        timeout=settings.OPENAI_TIMEOUT,
    )

    content = response.choices[0].message.content
    return json.loads(content)
